---
- hosts: build
- name: Create Build VM if necessary.
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Bring up Build VM.
      command: vagrant up --no-provision build
      register: bring_up_build_vm_result
      changed_when: "'already running' not in bring_up_build_vm_result.stdout"

- name: Ensure Build VM is available.
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Check for "build" machine in inventory.
      fail:
        msg: >
          The "build" VM is not reachable, but is required for
          building the app code Debian packages on the staging machines.
          Run `vagrant up build`, then `vagrant provision /staging/`.
          Thereafter you can run `vagrant provision /staging/` again
          and the application code will be rebuilt and reinstalled on each run.
      when: "'build' not in groups.all"

- name: Build securedrop-app-code deb package from local code.
  hosts: build
  vars_files:
    # The order of these files files is important, since each successive
    # include overrides vars in the previous files. Ordinarily we'd
    # use group memberships to manage the variable resolution order, but
    # since we're using Vagrant with Ansible, group management becomes tricky.
    - group_vars/securedrop.yml
    - group_vars/securedrop_application_server.yml
    - group_vars/development.yml
  roles:
    - { role: build-securedrop-app-code-deb-pkg, tags: [ "app-deb" ] }
    - { role: build-generic-pkg, tags: ["securedrop-ossec-server"], package_name: "securedrop-ossec-server" }
    - { role: build-generic-pkg, tags: ["securedrop-ossec-agent"], package_name: "securedrop-ossec-agent" }
    - { role: build-generic-pkg, tags: ["securedrop-keyring"], package_name: "securedrop-keyring" }

  sudo: yes
